;; in this version I tried to include a variable called time tracking-time-in-queue. However, I realized that it is not super different than the one I already had (time-spent-queue). So I will not include this for now




;;; THIS IS THE MOST UPDATED VERSION RIGHT NOW - 2.17.2021

;;;;; now people don't all go at the same time but they rather follow a distribution
;;;;  KPIs: average time in queue (refugee-served) and nb of new competitive is added (got-influenceD) and nr of competitive people who joined (go get food competitive) and average queue size

; PROBLEMS:
; when competitive is being served it stands on top of the cooperative person who was there
; time they get as preferred is the time they start heading there and not the time they arrive (waisting some hours)
; time in queue starts tracking once they are 5 patches away so not since they are actually standing in queue
; related to the this problem, also sometimes it happens that the person in number 0 in the waiting list is still heading to the place so time is tiking and no one is getting served even if there is someone in the front waiting

;;;
; TO HELP DEBUGGING (verification);;
; 1. I used colors to identify at which stage of the code the agent is
; 2. all parameters start = -42 by default, once updated they go to -50. this is so we know which agents have been through the process as well


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; PRACTICAL QUESTIONS
; adjust where competitive can stand (they are now quite far from queue, make them come to the front when it's their turn to be served)
; !!!! adjust where competitive place themselves in the list (they all go quite to a similar place right now --- they are literally all next to each other)
; perfect placement of competitive and new competitive:: closer to the queue, make them advance more and go to front when served
; in-cone: seems that it is getting too many people even when radius is 1 (people at the end of the qeuee turn into new competitive)
; right now i have really refugees and food distro, but this can be change to more generic names
;; new competitive people stay too far and dont get closer as it goes
; why are new-competitive walking back? (can this be because when they face current-task they might be facing it from the other side of the map? like looking over map makes it closer?


;; fixed:
; 1; if i make the model run very slowly, i see that some competitive people jump constantly in values for destinationx and destinationy from 13 10 (food distro) and their own
;;;;;(because of of line 1.1. from go get food. However, if i do the not member? serving-waiting-list, the no one updates their behaviour anymore (dont know why)) -- how to fix this? I am doin gthis now with the time-remaining-queue != service-time

; 2. (people at the end of the qeuee turn into new competitive) -- this is because their inital is equal to the threshold, so they are adjusting their attitude. fixed

;;;;;; CHALLENGES OF THE NEXT COUPLE OF DAYS ;;;;;;;;;;

;; 111111. SPATIAL CONSTRAINTS ;;    ;;; struggling a lot with this
; 1. every entity has walkable characteristic - set to no
; in the moving code write -- patch walkable? no, change direction and check again
; how difficult is this gonna be to get them to teh right position is something im gonna see tomorrow

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;





;;;; SUPPORTING VARIABLES AND PARAMETERS ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ; %% Set up the global variables for the model %%
  ; ===================================================== ;
globals [
  patchespertick      ; to control how much they can move every timetick
  freeRefugees        ; this is an agentset of refugees that are not busy getting food
  firstInLine         ; this is an agentset of the refugees that are the first in line
  distanceFirstToFood ; this is the distance from the first refugee in line to the food distribution
  wall
  supportive
  day
  hour
  minute
  middle_distribution_time
  num-refugees


  ; these variables will keep track of the KPIs of this model
  total_served
  timeSpentFood_average_output
  ; is it worth it to have distinction between behaviours in the average as well?
  ; these ones are lists now... think about this
  timeSpentFood_output_list
  timeSpentFood_output
  timeSpentFood_cooperative_output_list
  timeSpentFood_cooperative_output
  timeSpentFood_competitive_output_list
  timeSpentFood_competitive_output
  timeSpentFood_newcompetitive_output_list
  timeSpentFood_newcompetitive

  ;; 1132021 now one that keeps track of the actual TIME IN QUEUE variable
  trackingTimeInQueue_average_output
  trackingTimeInQueue_output_list


  numberNewCompetitive_output
  averageQueueSize_serving_output
  averageQueueSize_physical_output
  numberCompetitiveJoining_output

  ; placement of the first element in the queue
  ;startingpointx     ; now it is in the interface
  ;startingpointy     ; now it is in the interface



  ; variables to decide how to work with the in-cone competitive placement
  ; frontal zone
  frontal_position_min
  ;frontal_position_max ; will be equal to medium_position_min
  ; medium zone
  medium_position_min
  medium_position_max
  ; far zone
  ;far_position_min ; will be equal to medium_position_max
]

  ; %% Different type of agents in the model %%
  ; ===================================================== ;
breed [refugees refugee]
breed [fooddistros fooddistro]

  ; %% Attributes each agent type has %%
  ; ===================================================== ;
refugees-own
[
  xc                           ; unwrapped xcor
  yc                           ; unwrapped ycor
  dist                         ; distance from initial patch using xc, yc
  destinationx                 ; X coordinates of their next destination
  destinationy                 ; Y coordinates of their next destination
  number-in-physical-queue     ; their position in the physical queue
  number-in-serving-queue      ; their position in the serving queue
  before-me-queue              ; the turtle that is before them in the queue
  before-me-x                  ; the X coordinates of the person before them in the queue
  before-me-y                  ; the Y coordinates of the person before them in que queue
  how-close-x                  ; only for competitive: says how close they managed to put themselves in the serving list
  how-close-y                  ; only for competitive: variable only to help placing agent in the y axes
  current-task                 ; task they are currently busy with
  time-spent-food                ; how long they have been waiting in the queue already
  time-remaining-service       ; time left to get food when in the food distribution
  tendency-to-competitiveness  ; characteristic people have that tracks how likely they are to become competitive
  tendency-after-queuing             ; initial value for their tendency-to-competitiveness (assumption: although they might change their behaviour when queuing and stimulated by different people, their personality doesn't change)
  natural-tendency
  attitude                     ; attitude they have: competitive or cooperative
  ;walkable?                    ; attribute to guarantee people do not walk in the same patch as others (I am ignoring this for now. only requirement is that people dont stand on places where there are walls or others)
  list-influencing             ; list of influent people for a refugee (the competitive people who are waiting to be served and at a in-cone distance from the refugee) - i.e. queue jumpers around
  currently-influencing        ; list of the influent people around a refugee at a given time
  jumping-position             ; TEMPORARY, JUST TO CHECK
  desirable-area             ; TEMPORARY, JUST TO CHECK
  placing-new-competitive      ; TEMPORARY, JUST TO CHECK
  impact-on-me                 ; TEMPORARY, JUST TO CHECK
  up-or-down                   ; to help new-competitive queuing in both sides of the queeu (can i make it temporary)
  length-when-i-joined
  place-new-when-no-competitive
  preferred-fooddistro-time    ; assumption: every agent has a time that they prefer to go pick up their food and this doesn't change (early morning people will be early morning people, late night people will always be... doomed)
  first-jump ; boolean to help me keep track
  first-destination            ;TRY
  first-person-frontofme
  time-in-queue-test
  tracking-time-in-queue
  start-tracking-time
]

fooddistros-own [           ; more than characteristics such as the location, schedule and service-time, food distributions also manage related waiting-lists
  physical-waiting-list     ; this is the list used to place agents in a queue (so only includes cooperative people)
  serving-waiting-list      ; this is the list used to serve agents (similar to the physical-waiting-list but includes the competitive people who jumped in front)
  localization              ; ? depends on the type of food distribution, should they have a specific localization
  ;schedule                  ; ? depends on the type of food distribution, should they have a specific schedule?
  service-time              ; depending on the type of food distribution, there is a different service time. this should be a distribution and not a specific value
  ;walkable?                 ; attribute to guarantee people do not stand on patches that are occupied by something else
  opening-time
  closing-time
]

patches-own [
  walkable?
  queuing-zone
  start-queue
]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;; INTERFACE FUNCTIONS ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ; %% SETUP: Function to set up each new run %%
  ; calls on: setup-refugees, setup-foodpoint
  ; ===================================================== ;
to setup
  clear-all                  ; clear the interface


  ; the number of refugees being created in the simulation is dependent on the policy in place. This is because these agents are only created to pick up food so if policies using representatives are in place,
  ; I only need to create the agents that are representatives.
  if policy-implemented = "policy 0 (baseline)" [set num-refugees int(0.2 * total-number-inhabitants) ] ; baseline: 20% of the population attends it (head of households)
  if policy-implemented = "policy 1" [set num-refugees int(0.02 * total-number-inhabitants)]            ; policy 1: 2% of the population attends it (representatives of large groups)
  if policy-implemented = "policy 2" [set num-refugees int(0.04 * total-number-inhabitants)]            ; policy 2: 4% of the population attends it (representatives of medium groups)
  if policy-implemented = "policy 3" [set num-refugees int(0.07 * total-number-inhabitants)]            ; policy 3: 7% of the population attends it (representatives of small groups)
  if policy-implemented = "policy 4" [set num-refugees total-number-inhabitants]                       ; policy 4: 100% of the population attends it (every indiviudal picks their own food)


  setup-foodpoint            ; set up the food distribution points according to this function

  ;; supportive for the distribution
  set middle_distribution_time ([opening-time] of one-of fooddistros + ([closing-time] of one-of fooddistros - 1)) * 0.5

  setup-refugees             ; set up the refugee breed according to this function

  set patchespertick 0.2
  set distanceFirstToFood sqrt(startingpointx ^ 2 + startingpointy ^ 2)
  set supportive [-1 1]
 ; setting up time
  set day 0
  set hour 0
  set minute 0
  ;set startingpointx 4      ; now it is in the interface

  if with-obstacles? [setup-obstacles]


  ; set up the outputs as empty lists
  set timeSpentFood_cooperative_output_list []
  set timeSpentFood_competitive_output_list []
  set timeSpentFood_newcompetitive_output_list []
  set timeSpentFood_output_list []
  set timeSpentFood_newcompetitive 0
  set numberNewCompetitive_output 0
  set averageQueueSize_serving_output 0
  set averageQueueSize_physical_output 0
  set numberCompetitiveJoining_output 0
  set total_served 0
  set timeSpentFood_average_output 0
  ; 1132021
  set trackingTimeInQueue_average_output 0
  set trackingTimeInQueue_output_list []


  ; set up variables to determine the in-cone for competitive
    ; frontal zone
  set frontal_position_min 1
  ; medium zone
  set medium_position_min 3
  set medium_position_max 40

  ;
  ask patches with [(pxcor = [xcor] of one-of fooddistros - startingpointx ) and (pycor = [ycor] of one-of fooddistros - startingpointy)]
    [ set pcolor grey
      set start-queue "yes"]
  reset-ticks

end


  ; %% GO: This is the main function that is constantly being repeated (every time-tick) %%
  ; calls on: move-around, refugee-served, influencing-people
  ; ===================================================== ;
to go
  ; stop condition
  if ticks = 4000 [stop]

  ; update agentsets
  set freeRefugees refugees with [current-task != one-of fooddistros]                                 ; update the agentset freeRefugees with the Refugees that are not getting food each time tick
  set firstInLine refugees with [current-task = one-of fooddistros and number-in-serving-queue = 0]   ; update the agentset firstInLine with the Refugees that occupy position 0 in each one of the food distributions serving lists

  ; update positions
  move-around                                                                                         ; call function to guarantee everyone moves to where they should

  ; update queues
  ask firstInLine [                                                                                   ; ask the first in line to start the countdown to finish picking up their food and, once done, call refugee-served
    if (abs(xcor - destinationx) <= patchespertick and abs(ycor - destinationy) <= patchespertick) [set time-remaining-service time-remaining-service - 1] ; countdown
    if time-remaining-service = 0 [refugee-served]                                          ; once it has been served, call refugee-served
    ]

  ;;;;;;;;;;;
  ; this is a test
  ;ask refugees with [attitude = "cooperative" and current-task = one-of fooddistros and member? self [serving-waiting-list] of current-task and (self != [item 0 physical-waiting-list] of current-task)] [ if distance first-person-frontofme <= 3 and ycor <= [ycor] of current-task - startingpointy + 1 and ycor > [ycor] of current-task - startingpointy - 1 [set time-in-queue-test time-in-queue-test + 1]]

  ;ask refugees with [attitude = "cooperative" and current-task = one-of fooddistros and member? self [serving-waiting-list] of current-task and (self != [item 0 physical-waiting-list] of current-task)] [if distance first-person-frontofme <= 3 and ycor <= [ycor] of current-task - startingpointy + 1 and ycor > [ycor] of current-task - startingpointy - 1 and start-tracking-time = 0 [set tracking-time-in-queue 1 set start-tracking-time 1]]

  ask refugees with [tracking-time-in-queue != 0 and start-tracking-time = 1 and current-task = one-of fooddistros][set tracking-time-in-queue tracking-time-in-queue + 1]
  ;;;;;;;;;;

  ; update influencing and people switching behaviour
  influencing-people                                                                                  ; make sure that cooperative agents can be influenced each time tick

  ;ask refugees with [attitude = "new-competitive" and current-task != one-of fooddistros] [set tendency-to-competitiveness natural-tendency determine-attitude]  ; desperate attempt to fix the problem of people who should be new cooperative

  ;; Making time pass:
  set minute minute + 1
  if minute = 60 [set hour (hour + 1) set minute 0]
  if hour = 24 [set day (day + 1) set hour 0]


  ;; to make sure people go get food according to their preffered time and not the food-time function
  ask refugees with [preferred-fooddistro-time = ticks] [set current-task (one-of fooddistros) set color orange]

  ;; every time tick check how big queue is?
  set averageQueueSize_serving_output length [serving-waiting-list] of one-of fooddistros
  set averageQueueSize_physical_output length [physical-waiting-list] of one-of fooddistros


tick  ; make sure time passes
end

  ; %% FOOD-TIME: once called, it gives the x% of the free refugees the task to get food %%
  ; ===================================================== ;
to food-time
  ask n-of (int (0.4 * count freeRefugees)) freeRefugees [
    set current-task (one-of fooddistros)  ; give them the task
    set color orange]  ; set color to yellow so it is easier to debug
  ; if the number of free refugees is less or equal to 2, ask one of ;; this is to guarantee that it is possible to ask all of them due to rounding numbers
  if count freeRefugees <= 2 and count freeRefugees > 0  [ask one-of freeRefugees [set current-task (one-of fooddistros) set color yellow]]
end

to default-values
  set percentage-competitive 20
  set threshold-competitive 50
  set radius-visibility 4
  set impact-seeing-cutting 10
  set impact-long-queues 5
  set acceptable-length 15

  set startingpointx 4
  set startingpointy 2

  set natural-distancing-x 0.8
  set natural-distancing-y 0.8
end

;;;; ADDITIONAL FUNCTIONS THAT ARE CALLED  ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ; %% SETUP-REFUGEES %% ;
to setup-refugees
  create-refugees num-refugees
    [ setxy random-xcor random-ycor
      set color blue
      set shape "person"
      set size 1.7
      set current-task -42
      set number-in-physical-queue -42         ; set up a random number so that it doesn't initialize with 0
      set number-in-serving-queue -42          ; set up a random number so that it doesn't initialize with 0
      set time-remaining-service -42           ; set up a random number so that it doesn't initialize with 0
      set tendency-to-competitiveness -42
      set before-me-queue -42
      set before-me-x -42
      set before-me-y -42
      set xc xcor
      set yc ycor
      set walkable? "no"
      set list-influencing []
      set currently-influencing []
      set time-in-queue-test 0
      set tracking-time-in-queue 0
      set start-tracking-time 0


    ;; quite experimental: trying to get people to have different times to pick up food. there is a input thing in the interface where we can choose the type of distribution for these values
    ; then we cap these values to never be less than the opening time nor more than the closing-time  assumption: food distro closes at 18 but still serves the people that got there within the opening time. they simply dont accept more


;    ask n-of (int (distributionmethod * count refugees)) refugees [            ;; this makes the the set up suuuuuuuuuuuper slow
      let min_value_time ([opening-time] of one-of fooddistros * 60 )              ; *60 to make sure it is in minutes
      let max_value_time (([closing-time] of one-of fooddistros - 1) * 60)    ; *60 to make sure it is in minutes ( - 1 to guarantee that people dont only leave their house at the time the food distribution closeS)

    ; if policy 5 is in place, they get time-slots to pick up food (this is simulated by giving them uniform distribution to go there instead of a poisson/normal one)


    ifelse time-slot? [set preferred-fooddistro-time int((random-float (hours-open - 1) + [opening-time] of one-of fooddistros) * 60)] [
      if distribution-pick-up = "normal" [
        let mean_value_time_normal int (random-normal middle_distribution_time 2 * 60)          ; *60 to make sure it is in minutes
        set preferred-fooddistro-time max ( list min( list mean_value_time_normal max_value_time) min_value_time )]
        ;output-print preferred-fooddistro-time
      ;output-print preferred-fooddistro-time]  ; QUESTION: i am not sure what the standard deviation should be? (right now is 4 but with no big reason)

    ;; or poisson  ;; limitation of this approach is that everyone goes in even number with a major gap. (60, 120, 180, so for a long time no one goes)
      if distribution-pick-up = "poisson" [
        let supportive_poisson (poisson-mean + [opening-time] of one-of fooddistros)
        let mean_value_time_poisson random-poisson supportive_poisson
        set preferred-fooddistro-time mean_value_time_poisson * 60                    ; *60 to make sure it is in minutes
        set preferred-fooddistro-time max ( list min( list preferred-fooddistro-time max_value_time) min_value_time )]
        ;output-print preferred-fooddistro-time
      ;output-print preferred-fooddistro-time]

;  ]
  ]]

    ; COOPERATIVE: according to the input given by the user in the interface, ask a percentage of refugees (= 100% - %competitive) to set up their tendency-to-competitiveness as a value lower than the threshold
    ask n-of (int (num-refugees * (100 - percentage-competitive) * 0.01)) refugees [
      set tendency-to-competitiveness random threshold-competitive + 1
      set natural-tendency tendency-to-competitiveness                           ; store the initial value they have
      set tendency-after-queuing tendency-to-competitiveness
      set color orange]

    ; COMPETITIVE: ask the ones that still have no value (which will equal the % competitive from the interface) to set up a tendency-to-competitiveness value between the threshold and 100
    ask refugees with [tendency-to-competitiveness = -42] [
      set tendency-to-competitiveness random (100 - threshold-competitive) + threshold-competitive
      set natural-tendency tendency-to-competitiveness                           ; store the initial value they have
      set tendency-after-queuing tendency-to-competitiveness
      set color cyan]

    determine-attitude   ; this function will determine their attitude depending on the values that they have
end

  ; %% SETUP-FOODPOINTS %% ;
to setup-foodpoint
  create-fooddistros 1
  [ setxy 23 11
    set color pink
    set shape "truck"
    set size 4
    ;set service-time 20 ; right now it means that each person takes 20 time ticks to get served at the food point ;
    set walkable? "no"
    set physical-waiting-list []
    set serving-waiting-list []
    ;set schedule hours-open ; useless I think
    set opening-time 1
    set heading 250
    set closing-time opening-time + hours-open   ; assumption: food distro would always start at 9am



    if policy-implemented = "policy 0 (baseline)" [set service-time 4] ; baseline: 20% of the population attends it (head of households)
    if policy-implemented = "policy 1" [set service-time 10]            ; policy 1: 2% of the population attends it (representatives of large groups)
    if policy-implemented = "policy 2" [set service-time 7]            ; policy 2: 4% of the population attends it (representatives of medium groups)
    if policy-implemented = "policy 3" [set service-time 6]            ; policy 3: 7% of the population attends it (representatives of small groups)
    if policy-implemented = "policy 4" [set service-time 1]



    ; creating in cone area to queue (to use for the competitive people)

    ; the frontal positions (1-5)
    ask patches in-cone 5 60 with [distance one-of fooddistros > 3]
      [ set pcolor red
        set queuing-zone "queuing_frontal"]
    ask patches in-cone 10 90 with [distance one-of fooddistros < 10 and distance one-of fooddistros > 4]
      [ set pcolor pink
        set queuing-zone "queuing_medium"]
    ask patches in-cone 20 90 with [distance one-of fooddistros < 20 and distance one-of fooddistros > 10 and pycor > 5 and pycor < 15]
      [ set pcolor yellow
        set queuing-zone "queuing_far"]


  ]
end

  ; %% DETERMINE-ATTITUDE: this function is called when setting up the refugees. It sets up refugee's attitude according to their initial tendency-to-competitiveness value AND the threshold to become competitive
  ; called by: setup-refugees
  ; ======================================================= ;
to determine-attitude
  ask refugees with [natural-tendency <= threshold-competitive] [           ; if their natural-tendency is less than the threshold, they are cooperative
    set attitude "cooperative"]
  ask refugees with [natural-tendency > threshold-competitive] [            ; if their natural-tendency is more than the threshold, they are competitive
    set attitude "competitive"
    ;output-print who
  ];output-print "test" ]
end

  ; %% MOVE-AROUND: this function is called every time tick and is responsible for making refugees move around %%
  ; It is divided into (1) people who are getting food and (2) people who are just moving around ;
  ; called by: go
  ; calls on: go-get-food
  ; ===================================================== ;
to move-around




  ;;; (1) ask refugees that need to get food food (i.e. have it as current-task)
  ask refugees with [current-task = one-of fooddistros][
    go-get-food ]

  ask freeRefugees [
    rt random 360               ; set random headin
    forward 1                   ; advance one step
  ]

  ;;; (2) make refugees without task move around
;  ask freeRefugees [
;    rt random-float 360
;    set xc xc + (1 * dx)  ; used to be patchespertick * dx but i don't need the granularity of this
;    set yc yc + (1 * dy)
;   ; hide turtles who have moved out of the world
;    ifelse patch-at (xc - xcor) (yc - ycor) = nobody
;      [ hide-turtle ]
;      [ show-turtle
;        set xcor xc
;        set ycor yc ]
;      set dist sqrt (xc * xc + yc * yc)]
end

;; these were tries for making this right
;    if turtles-on patch-ahead 2 walkable? = "no" [

;    ifelse not any? fooddistros-on patch-ahead 1 [
;      rt random-float 360
;      set xc xc + (patchespertick * dx)
;      set yc yc + (patchespertick * dy)
      ; hide turtles who have moved out of the world
;      ifelse patch-at (xc - xcor) (yc - ycor) = nobody
;      [ hide-turtle ]
;      [ show-turtle
;        set xcor xc
;        set ycor yc ]
;      set dist sqrt (xc * xc + yc * yc)]

;    [set color yellow
;      rt 15
;      if any? fooddistros-on patch-ahead 1 [set color green rt 15]]

;  ]
;end


  ; GO-GET-FOOD: this is the function responsible to determine how agents that have the task of getting food behave
  ; called by: move-around
  ; calls on: line-up-cooperative and line-competitive
  ; =================================================;
to go-get-food

    ;; 1.1 if they are far (more than 5), head closer to the food point  (had to write the not new competitive because it was sending everyone to the wrong place) ;;;; problem: this leads to some glitches -- competitive agents who are far tend to get the locations 13 10 and glitch a bit. this doesnt trouble the model and how it runs right now but could be looked into. ive tried switching to serving queue but then it somehow sometimes checks for people who are not queuing anymore
    ;if (distance current-task > distanceFirstToFood) and (not member? self [serving-waiting-list] of current-task) and (time-remaining-service != 0 ) and (attitude != "new-competitive") [set color yellow set destinationx ([xcor] of current-task) set destinationy ([ycor] of current-task) facexy destinationx destinationy check-for-obstacles]
  let starting-patch one-of patches with [start-queue = "yes"]
  if (not member? self [serving-waiting-list] of current-task) and (time-remaining-service != 0 ) and (attitude != "new-competitive") [set color yellow set destinationx ([pxcor] of starting-patch) set destinationy ([pycor] of starting-patch) facexy destinationx destinationy check-for-obstacles]

    ;; 1.2 FOR COOPERATIVE: if they are close-ish (less than 5), add themselves to both the physical-waiting-list and the serving-waiting-list  (only once!)
    if (distance starting-patch) <= 2 and (not member? self [physical-waiting-list] of current-task) and (attitude = "cooperative")
        [ask current-task [set physical-waiting-list lput myself physical-waiting-list]       ; add self to physical-waiting-list
         ask current-task [set serving-waiting-list lput myself serving-waiting-list]         ; add self to serving-waiting-list
         set number-in-physical-queue ([position myself physical-waiting-list] of current-task) ; update the variable number-in-physical-queue with their position
         set number-in-serving-queue ([position myself serving-waiting-list] of current-task)   ; update the variable number-in-serving-queue with their position to be served
         set color green ; set color to green so it is easier to debug
         set time-remaining-service [service-time] of current-task
         if impact-length? [update-competitiveness-length]
         set time-spent-food 0
         set length-when-i-joined length [serving-waiting-list] of current-task ;;; to test and see if this helps


         ; testing something
       ;  if number-in-physical-queue != 0 [
       ;  let before-before (number-in-physical-queue - 1) ; supportive variable so we are able to access list
       ;  set first-person-frontofme [item before-before physical-waiting-list ] of current-task]


  ]



    ;; 1.2 FOR COMPETITIVE: if they are close-ish (less than 5), add themselves to the serving-waiting-list in a relatively frontal position (as they desire to get served quickly)
    if (distance starting-patch) <= 2 and (not member? self [serving-waiting-list] of current-task) and (attitude = "competitive")[
      if [serving-waiting-list] of current-task = [] [ask current-task [set serving-waiting-list fput myself serving-waiting-list]]      ; if the list is empty when they get there, simply add themselves
      if [serving-waiting-list] of current-task != [] [                                                                                  ; if the list is not empty
        set desirable-area int((length [physical-waiting-list] of current-task * 0.8 ))                              ; considers the relatively frontal position to be somewhere in the 70% beginning of the queue
        ;output-print desirable-area
        set jumping-position int(desirable-area * (100 - tendency-to-competitiveness) * 0.01) + 1                    ; position in which they will force themselves in the queue is inverse to their tendency to competitiveness - the more competitive they are, the more frontal they will be ;; assumption: queue manager will not allow someone to jump to first position (hence the +1)
        ;set jumping-position ((random desirable-area) * tendency-to-competitiveness * 0.01) + 1
        let jumpy-jumpy jumping-position
        ;output-print tendency-to-competitiveness
        ;output-print jumpy-jumpy
        ask current-task [set serving-waiting-list insert-item jumpy-jumpy serving-waiting-list myself]]
      set number-in-serving-queue ([position myself serving-waiting-list] of current-task)
      set how-close-y (random-float natural-distancing-y + 0.5)                                                                       ; supportive variable to know where to place turtle when waiting
      set color cyan
      set time-remaining-service [service-time] of current-task
      set time-spent-food 0
      set length-when-i-joined length [serving-waiting-list] of current-task
      set place-new-when-no-competitive random-float length-when-i-joined
      set up-or-down one-of supportive
      set numberCompetitiveJoining_output numberCompetitiveJoining_output + 1

      ;; assumption: no one objects to people cutting in line. cooperative people are passive to that

         ; !! important!! everytime a competitive person jumps in, everyone in the serving list updates their number in serving queue and sets its time remaining to the initial time
         ; assumption: this is assuming that if a cooperative person is almost getting served and a competitive person jumps in, their service is nulified and they have to start from the beginning
         ;; this assumption is not true anymore (13.1.2021 - because i added in the upper block that they cannot add themselves to position 1 of the queue)
         ask refugees with [(current-task = one-of fooddistros) and (member? self [serving-waiting-list] of current-task)][
            set number-in-serving-queue ([position myself serving-waiting-list] of current-task)
            set time-remaining-service [service-time] of current-task]
    ;;; this can be replaced with update-serving-list




         ask refugees with [current-task = one-of fooddistros and member? self [physical-waiting-list] of current-task and attitude = "cooperative" and (abs(xcor - destinationx) <= patchespertick and abs(ycor - destinationy) <= patchespertick)]
           [ let cutting-queues-people refugees with [current-task = one-of fooddistros and member? self [serving-waiting-list] of current-task and attitude = "competitive"] in-cone radius-visibility 60
             if count cutting-queues-people > 0
             [ ;set color yellow
               set list-influencing [self] of refugees with [current-task = one-of fooddistros and member? self [serving-waiting-list] of current-task and attitude = "competitive"] in-cone radius-visibility 60
               set tendency-to-competitiveness min( list (tendency-after-queuing + (impact-seeing-cutting * length list-influencing)) 100)]   ; cap the maximum of tendency-to-competitiveness to 100
               if tendency-to-competitiveness > threshold-competitive [got-influenced]]     ; if the value is now higher than the threshold, update attitude



         ; !! everytime a competitive person jumps in, it is important to update the tendency-to-competitiveness of cooperative people

         ;;; change logic of this.
         ; if competitive person joins (which is the bit of function where i am right now, ask refugees around to update their tendency to competitiveness
;         let people-around refugees with [current-task = one-of fooddistros and member? self [physical-waiting-list] of current-task and attitude = "cooperative" and (abs(xcor - destinationx) <= patchespertick and abs(ycor - destinationy) <= patchespertick)] in-cone radius-visibility
;         ask people-around [
;           set color yellow
;           set tendency-to-competitiveness tendency-to-competitiveness + impact-seeing-cutting]



  ;;; this one or the one above
;         ask refugees with [current-task = one-of fooddistros and member? self [physical-waiting-list] of current-task and attitude = "cooperative" and (abs(xcor - destinationx) <= patchespertick and abs(ycor - destinationy) <= patchespertick)]
;           [ let cutting-queues-people refugees with [current-task = one-of fooddistros and member? self [serving-waiting-list] of current-task and attitude = "competitive"] in-cone radius-visibility
;           if count cutting-queues-people > 0
;           [ set color yellow
;             set list-influencing [self] of refugees with [current-task = one-of fooddistros and member? self [serving-waiting-list] of current-task and attitude = "competitive"] in-cone radius-visibility
;             set tendency-to-competitiveness tendency-to-competitiveness + (impact-seeing-cutting * count cutting-queues-people) ]]
  ]

  ;;;;




    ;; 1.3 FOR COOPERATIVE: if they are already in the physical-waiting-list of the task and are not in the place where they should be, line-up-cooperative (see question 2)
;    if (member? self [physical-waiting-list] of current-task) and (abs(xcor - destinationx) > patchespertick or abs(ycor - destinationy) > patchespertick) and (attitude = "cooperative")
   if (member? self [physical-waiting-list] of current-task) and (attitude = "cooperative")
     [;set color red ; to make it easier to debug
      set time-spent-food time-spent-food + 1
      line-up-cooperative] ; call function to line-up-cooperative


   ;; 1.3 FOR COMPETITIVE: if they have already been added to the serving list, send them to a place in the front
   ;; assumption: if they are competitive, they do not care about social distancing
   if (member? self [serving-waiting-list] of current-task) and (attitude = "competitive")
      [set color white
       set time-spent-food time-spent-food + 1
       ;line-competitive
       line-competitive-newversion]

  ;; 1.4 FOR NEW-COMPETITIVE: they are already in the line, just need to face their right destination
  if (member? self [serving-waiting-list] of current-task) and (attitude = "new-competitive")
      [set time-spent-food time-spent-food + 1
        line-new-competitive]
  ;;;;;;;;;;;;


end


  ;; %% line-up-cooperative: this is the function that defines how people lineup %%
  ;; once refugees have the task to get food and are placed in the physical-waiting-list, get values of the person before them and go there
  ; called by: move-around
  ; ===================================================== ;
to line-up-cooperative

  ;; If it is the first person in the waiting list, set destination as close to current-task
  ;; If they are not the first, see who is before in physical-waiting-list, face them and queue behind
  ;; Get closer and closer until they are at their destination
  ;;;;; This is still initial with only cooperative behaviour
  ask refugees with [(current-task = one-of fooddistros) and (member? self [physical-waiting-list] of current-task) and (attitude = "cooperative")][
  ;  let before (number-in-physical-queue - 1) ; supportive variable so we are able to access list
    if number-in-physical-queue = 0 [
      set before-me-queue -30 ; first person in line does not have anyone in front
      set before-me-x -30
      set before-me-y -30
    ]

    if number-in-physical-queue != 0 [
      let before (number-in-physical-queue - 1) ; supportive variable so we are able to access list
      set before-me-queue [item before physical-waiting-list ] of current-task
      set before-me-x [xcor] of before-me-queue
      set before-me-y [ycor] of before-me-queue]
    ifelse (self = [item 0 physical-waiting-list] of current-task) [set destinationx ([xcor] of current-task) - startingpointx set destinationy ([ycor] of current-task) - startingpointy] [set destinationx (before-me-x - social-distancing) set destinationy before-me-y]

    ; *this is the bit where they walk
    ifelse (abs(xcor - destinationx) > patchespertick or abs(ycor - destinationy) > patchespertick)[facexy destinationx destinationy check-for-obstacles][if start-tracking-time = 0 [set tracking-time-in-queue 1 set start-tracking-time 1]]]

end

  ;; %% LINE-COMPETITIVE: this function physically places the competitive agents somewhere along the first half of the line (assumption: this is the desirable area)
  ;; the physical position is dependent on the place where they got added in the list (see move-around) %%
  ;; called by: move-around
  ; ===================================================== ;
to line-competitive


  ; if they are the number one in the serving queue, they go to the point where people are serviced (this is the same for all agents)
  if self = [item 0 serving-waiting-list] of current-task [

    set destinationx ([xcor] of current-task - startingpointx)
    set destinationy ([ycor] of current-task) - startingpointy]


  ; if they are not the first ones in the serving queue, place them in a physical location that that mimics their number in serving queue
  if self != [item 0 serving-waiting-list] of current-task[
    set how-close-x ([position myself serving-waiting-list] of current-task)            ; the position in which they manage to force themselves in the serving waiting list will dictate where they wait


    set destinationx ([xcor] of current-task - (how-close-x + startingpointx - 6) ) * 0.5                      ; xcor: they wait along the line where others wait in a place that is similar to their position in the list (- startingpointx to account for the place where the first member waits)
    set destinationy ([ycor] of current-task - startingpointy) + (how-close-y * up-or-down)    ]         ; ycor: their position on the vertical axis can vary in between + 4 or -4 from the position of the others

  ; constant queueing: if they are not where they should be yet, forward
  if (abs(xcor - destinationx) > patchespertick or abs(ycor - destinationy) > patchespertick)[facexy destinationx destinationy check-for-obstacles]

  ;;; try the solution kevin suggested
  ;;;; THIS IS NOT WORKING
;  if length [physical-waiting-list] of current-task <= 5 [

;    if self = [item 0 serving-waiting-list] of current-task [
;      set destinationx ([xcor] of current-task - startingpointx)
;      set destinationy ([ycor] of current-task) - startingpointy]

;    if self != [item 0 serving-waiting-list] of current-task [
;      set destinationx [xcor] of current-task
;      set destinationy [ycor] of current-task

;      facexy destinationx destinationy
;      if not any? other refugees in-cone social-distancing [fd patchespertick]]]



end

  ;; %% REFUGEE-served: once the first in the serving-line has been served (time-remaining-queue = 0), this function updates the waiting list of the food distribution centers by removing the agent from the first place.
  ;; Note: different things happen if it is a cooperative (1) or a competitive (2) agent being served
  ;; called by: go
  ;; calls on: update-physical-queue or update-serving queue
  ; ===================================================== ;
to refugee-served

  if [serving-waiting-list] of current-task != [] [                                 ; to guarantee we only do this when the list isn't empty

  set timeSpentFood_output_list lput time-spent-food timeSpentFood_output_list

  ; 1132021
  set trackingTimeInQueue_output_list lput tracking-time-in-queue trackingTimeInQueue_output_list



  ;;
  set timeSpentFood_output time-spent-food
  set total_served total_served + 1
  set timeSpentFood_average_output ( sum timeSpentFood_output_list / total_served)
  ; 1132021
  set trackingTimeInQueue_average_output ( sum trackingTimeInQueue_output_list / total_served)


  ; testing
  ;output-print who
  ;output-print time-spent-food
  ;output-print start-tracking-time
  ;output-print tracking-time-in-queue


    ;; (1) if the agent served is cooperative it is necessary to update both lists
    if attitude = "cooperative" and [physical-waiting-list] of current-task != [] [ ; if the refugee served was cooperative, update both lists (as it is a member of both) (make sure that physical list is not empty!)
      ask current-task [set physical-waiting-list remove myself physical-waiting-list]  ; updates queue by dropping the first refugee in the waiting list (the refugee who was served leaves the list)
      update-physical-queue                                                         ; physical update -- people move forward
      ask current-task [set serving-waiting-list remove myself serving-waiting-list]    ; updates queue by dropping the first refugee in the waiting list (the refugee who was served leaves the list)
      set timeSpentFood_cooperative_output_list lput time-spent-food timeSpentFood_cooperative_output_list
      update-serving-queue
      set current-task -50                     ; set the current-task of the refugee who was served to -50 so it goes back into wandering around again
      set number-in-physical-queue -50         ; go to after queuing value (helps debugging)
      set number-in-serving-queue -50          ; go to after queuing value (helps debugging)
      set time-remaining-service -50           ; go to after queuing value (helps debugging)
      set before-me-queue -50                  ; go to after queuing value (helps debugging)
      set before-me-x -50                      ; go to after queuing value (helps debugging)
      set before-me-y -50                      ; go to after queuing value (helps debugging)
      set tendency-to-competitiveness natural-tendency
      set list-influencing []
      set currently-influencing []
      ;; UNCOMMENT!
      ;set time-spent-food -50
      set color pink                                                                ; to help debugging


      ; RESET: update attitude to their natural one and related attributes ;; assumption: even though someone might be influenced into cutting in line, their natural attitude is not changed
      if natural-tendency <= threshold-competitive [set attitude "cooperative"]
      if natural-tendency > threshold-competitive [set attitude "competitive"]
      set tendency-to-competitiveness natural-tendency
      set tendency-after-queuing natural-tendency

    ]

    ;; (2) if the agent served is competitive it is only necessary to update the serving list
    if attitude = "competitive" [                                                  ; if the refugee served was competitive, update only the serving list (as it was never part of the physical and the position of others won't change)
      ;ask current-task [set serving-waiting-list but-first serving-waiting-list set color one-of base-colors]   ; drops the first refugee in the waiting list (the refugee who was served leaves the list)
      ask current-task [set serving-waiting-list remove myself serving-waiting-list]         ; somehow the code above didn't always work (sometimes a compt refugee was already walking around but still in the list). solution: the refugee served drops themself from the serving waiting-list
      set timeSpentFood_competitive_output_list lput time-spent-food timeSpentFood_competitive_output_list
      update-serving-queue
      set current-task -50                     ; set the current-task of the refugee who was served to -50 so it goes back into wandering around again
      set number-in-physical-queue -50         ; go to after queuing value (helps debugging)
      set number-in-serving-queue -50          ; go to after queuing value (helps debugging)
      set time-remaining-service -50           ; go to after queuing value (helps debugging)
      set before-me-queue -50                  ; go to after queuing value (helps debugging)
      set before-me-x -50                      ; go to after queuing value (helps debugging)
      set before-me-y -50                      ; go to after queuing value (helps debugging)
      ;UNCOMMENT
      ;set time-spent-food -50
      set color violet                                                             ; to help debugging
    ]


    ;; (3) if the agent served is a new competitive, it is necessary to update the serving list, set the usual parameters to default values and reset tendency to competitiveness and attitude to initial values
    if attitude = "new-competitive" [
      ask current-task [set serving-waiting-list remove myself serving-waiting-list]
      set timeSpentFood_newcompetitive_output_list lput time-spent-food timeSpentFood_newcompetitive_output_list
      update-serving-queue
      set current-task -22                     ; set the current-task of the refugee who was served to -50 so it goes back into wandering around again
      set number-in-physical-queue -22         ; go to after queuing value (helps debugging)
      set number-in-serving-queue -22          ; go to after queuing value (helps debugging)
      set time-remaining-service -22           ; go to after queuing value (helps debugging)
      set before-me-queue -22                  ; go to after queuing value (helps debugging)
      set before-me-x -22                      ; go to after queuing value (helps debugging)
      set before-me-y -22                      ; go to after queuing value (helps debugging)
      ;uncomment!
      ;set time-spent-food -22
      ;set tendency-to-competitiveness natural-tendency
      set list-influencing []
      set currently-influencing []
      set color turquoise

      ; RESET: update attitude to their natural one and related attributes ;; assumption: even though someone might be influenced into cutting in line, their natural attitude is not changed
      if natural-tendency <= threshold-competitive [set attitude "cooperative"]
      if natural-tendency > threshold-competitive [set attitude "competitive"]
      set tendency-to-competitiveness natural-tendency
      set tendency-after-queuing natural-tendency


    ]

  ]

end



  ;; %% UPDATE-PHYSICAL-QUEUE: after having updated the physical-waiting-list it is necessary that each member in the queue updates their position both in the attributes and spatially.
  ;; Everyone's position is updated (i.e number 1 in queue becomes number 0, etc), everyone moves one step forward and the count starts again with the new number 0
  ;; (this is basically the line-up-cooperative function with the only extra of reassigning the number-in-physical-queue)
  ;; called by: refugee-served, got-influenced
  ; ===================================================== ;
to update-physical-queue
  ask refugees with [(current-task = one-of fooddistros) and (member? self [physical-waiting-list] of current-task) and (attitude = "cooperative")][
    set number-in-physical-queue ([position myself physical-waiting-list] of current-task)
    let beforenew (number-in-physical-queue - 1)
    if number-in-physical-queue = 0 [
      set before-me-queue -30
      set before-me-x -30
      set before-me-y -30
    ]

    if number-in-physical-queue != 0 [
      set before-me-queue [item beforenew physical-waiting-list ] of current-task
      set before-me-x [xcor] of before-me-queue
      set before-me-y [ycor] of before-me-queue]
    ifelse (self = [item 0 physical-waiting-list] of current-task) [set destinationx ([xcor] of current-task) - startingpointx set destinationy ([ycor] of current-task) - startingpointy] [set destinationx (before-me-x - social-distancing) set destinationy before-me-y]
    if (abs(xcor - destinationx) > patchespertick or abs(ycor - destinationy) > patchespertick)[facexy destinationx destinationy check-for-obstacles]
  ]
end

  ; %% UPDATE-SERVING-QUEUE: everytime an agent is served, everyone in the serving line updates their "number-in-serving-queue" attribute %%
  ; called by: refugee-served
  ; ===================================================== ;
to update-serving-queue

  ask refugees with [(current-task = one-of fooddistros) and (member? self [serving-waiting-list] of current-task)] [
    set number-in-serving-queue ([position myself serving-waiting-list] of current-task)          ; assumption: once they jump in, they dont constantly try to jump in as well. they slightly adjust their positions
    set time-remaining-service [service-time] of current-task


    ; if the agent is in the frontal area and should be backwards, update
    ; if it should be medium
    if [queuing-zone] of patch-here = "queuing_frontal" and number-in-serving-queue > medium_position_min and number-in-serving-queue <= medium_position_max [let second-destination one-of patches with [queuing-zone = "queuing_medium"] set destinationx ([pxcor] of second-destination) set destinationy ([pycor] of second-destination)]
    ; if it should be further
    if [queuing-zone] of patch-here = "queuing_frontal" and number-in-serving-queue > medium_position_max [let second-destination one-of patches with [queuing-zone = "queuing_far"] set destinationx ([pxcor] of second-destination) set destinationy ([pycor] of second-destination)]

    ; if the agent is in the medium and should be elsewhere, update
        ; if it should be frontal
    if [queuing-zone] of patch-here = "queuing_medium" and number-in-serving-queue > frontal_position_min and number-in-serving-queue <= medium_position_min [let second-destination one-of patches with [queuing-zone = "queuing_frontal"] set destinationx ([pxcor] of second-destination) set destinationy ([pycor] of second-destination)]
    ; if it should be further
    if [queuing-zone] of patch-here = "queuing_medium" and number-in-serving-queue > medium_position_max [let second-destination one-of patches with [queuing-zone = "queuing_far"] set destinationx ([pxcor] of second-destination) set destinationy ([pycor] of second-destination)]

    ; if the agent is in the further and should be elsewhere, update
        ; if it should be frontal
    if [queuing-zone] of patch-here = "queuing_far" and number-in-serving-queue > frontal_position_min and number-in-serving-queue <= medium_position_min [let second-destination one-of patches with [queuing-zone = "queuing_frontal"] set destinationx ([pxcor] of second-destination) set destinationy ([pycor] of second-destination)]
    ; if it should be further
    if [queuing-zone] of patch-here = "queuing_far" and number-in-serving-queue > medium_position_min and number-in-serving-queue <= medium_position_max [let second-destination one-of patches with [queuing-zone = "queuing_medium"] set destinationx ([pxcor] of second-destination) set destinationy ([pycor] of second-destination)]



    if (abs(xcor - destinationx) > patchespertick or abs(ycor - destinationy) > patchespertick)[facexy destinationx destinationy check-for-obstacles]]
;  ask current-task [set color yellow]
 ; ]
end


  ; %% INFLUENCING-PEOPLE: this function guarantees that at each time tick, the tendency-to-competitiveness of agents in queues is updated according to the presence (or not) of others queue jumpers in line
  ; everytime a competitive person gets into the line, it directly affects the people around - this is coded in the function of adding competitive people to the queue.
  ; however, it could be that competitive people show up next to someone after they were both queueing (because either they move forward or because it is a new competitive)
  ; for that reason, in the go function there is a extra list that tracks the amount of people who have this behaviour and are in radius at a current time. it merges this with the other list and removes duplicates to guarantee each refugee can only influence once.
  ; this guarantees that the tendency to competitiveness takes into account all the influent people (queue jumpers around) that the agent has seen since it has been lining up
  ; note: can't influence the person who is already in the front of the queue
  ; called by: go
  ; calls on: got-influenced
  ; ====================================================== ;
to influencing-people

  ask refugees with [current-task = one-of fooddistros and member? self [physical-waiting-list] of current-task and attitude = "cooperative" and (abs(xcor - destinationx) <= patchespertick and abs(ycor - destinationy) <= patchespertick) and [position myself serving-waiting-list] of current-task  != 0]
    [ set currently-influencing [self] of refugees with [current-task = one-of fooddistros and member? self [serving-waiting-list] of current-task and (attitude = "competitive" or attitude = "new competitive")] in-cone radius-visibility 60    ; assumption: they only see in front of them
      ; merge with the list that was already created (list-influencing)
      set list-influencing sentence list-influencing currently-influencing
      ; remove duplicates (to guarantee each refugee can only be influenced once by each queue jumper)
      set list-influencing remove-duplicates list-influencing
      ; update the tendency to competitiveness to be equal to the initial plus the nr of people jumping queues around * the influence that has in a refugee
      set tendency-to-competitiveness min( list (tendency-after-queuing + (impact-seeing-cutting * length list-influencing)) 100) ; cap maximum value of tendency-to-competitiveness to 100
      if tendency-to-competitiveness > threshold-competitive [got-influenced]]     ; if the value is now higher than the threshold, update both attitude and behaviour (got-influenced)

end

  ; %% got-influenced: once an agent has a tendency-to-competitiveness equal or higher than the threshold, it adopts a competitive behaviour. In this function this behaviour is described
  ; called by: influencing-people
  ; calls on: update-physical-queue
  ; ===================================================== ;
to got-influenced
  set color grey                      ; to debug
  set attitude "new-competitive"      ; behaviour is "new-competitive" so it is easy to distinguish the naturally competitive people and the ones that were influenced and changed attitude
  set numberNewCompetitive_output numberNewCompetitive_output + 1

  ; remove themselves from physical waiting list
  ask current-task [set physical-waiting-list remove myself physical-waiting-list]
  set number-in-physical-queue -33       ; back to the default value
  set before-me-queue -33                ; back to default value
  set before-me-x -33                    ; back to default value
  set before-me-y -33                    ; back to default value

  ; everyone else updates their spot in the physical waiting list
  update-physical-queue


  ;;;; MAKE THEM STAY IN A PLACE THAT IS LOGICAL FOR THEM !!!!
  ; make them step out of the queue for visual purpuses
  ;; question: why do they walk backwards with the second method??
  ;set destinationx destinationx + 2
  ;set destinationy destinationy + 4

  ;face current-task
  ;forward number-in-serving-queue / 3   ; how much they jump depends on what their position was (people behind in the queue will jump more than people ahead)




  ; place self in a relatively good spot in the serving list (assumption: doesnt make sense to follow the exact logic of competitive because they might be in a better place already, so use the same logic but desirable area is from their place to the first spot)
  ; 1. first remove from serving-waiting-list
  ask current-task [set serving-waiting-list remove myself serving-waiting-list]



  ;;;; NEW THEORY TO PLACE THEM IN SERVING LIST, CHECK THIS ;;;;;;;
  ;; the number of places a new-competitive jumps is realted to its tendency to competitiveness at the moment
  if [serving-waiting-list] of current-task = [] [ask current-task [set serving-waiting-list fput myself serving-waiting-list]]      ; if the list is empty when they get there, simply add themselves
  if [serving-waiting-list] of current-task != [] [
    set placing-new-competitive int( random-float(number-in-serving-queue - 1) * tendency-to-competitiveness * 0.01) + 1
    let jumpy-new placing-new-competitive
    ask current-task [set serving-waiting-list insert-item jumpy-new serving-waiting-list myself ]]

  set time-remaining-service [service-time] of current-task ;; changed: cant hurt to have this?
  ;;;;

  ; 1.2 then place self in better place
;  if [serving-waiting-list] of current-task = [] [ask current-task [set serving-waiting-list fput myself serving-waiting-list]]      ; if the list is empty when they get there, simply add themselves
;  if [serving-waiting-list] of current-task != [] [                                                                                  ; if the list is not empty
;    let desirable-area-new-competitive number-in-serving-queue - 1                                                                 ; for a new competitive, they aim to jump to a place in front of the place where they are already
;    let jumping-position-new-competitive random desirable-area-new-competitive + 1                                                 ; choose a random place within the desirable area except for place 0 ;; assumption: queue manager will not allow someone to jump
;    ask current-task [set serving-waiting-list insert-item jumping-position-new-competitive serving-waiting-list myself]]            ; rejoin the serving-waiting-list in this position
  set how-close-y (random-float natural-distancing-y + 0.5)                                                                                                   ; supportive variable for where they are going to stand
  set how-close-x random-float natural-distancing-x + 0.5
  set up-or-down one-of supportive


  ; let everyone else in the physical queue update their number
  update-serving-queue
  ;ask refugees with [(current-task = one-of fooddistros) and (member? self [serving-waiting-list] of current-task)][
  ;  set number-in-serving-queue ([position myself serving-waiting-list] of current-task)
  ;  set time-remaining-service [service-time] of current-task]




end


to line-new-competitive


  ;;;; TESTING THIS
  ; make them wait next to the person who is in front of them in the queue
  set color brown ; for visual purposes
  ;set attitude "new-competitive" ;;; seems that some are losing their identity when they start queuing... not sure why


  ;; setting up the values they need to queue
  let before-new-competitive (number-in-serving-queue - 1)
  if number-in-serving-queue = 0 [
    set before-me-queue -30
    set before-me-x -30
    set before-me-y -30
  ]


  if number-in-serving-queue != 0 [
    set before-me-queue [item before-new-competitive serving-waiting-list] of current-task
    set before-me-x [xcor] of before-me-queue
    set before-me-y [ycor] of before-me-queue]

  ; send hhem places
  if self = [item 0 serving-waiting-list] of current-task [
    set destinationx ([xcor] of current-task - startingpointx)
    set destinationy ([ycor] of current-task - startingpointy)]

  if self != [item 0 serving-waiting-list] of current-task [
    set destinationx (before-me-x - how-close-x)
    ;set destinationy (before-me-y - how-close-y) ]


    ;; trying to cap the location where new competitive can stand (min max)
    ;; but also make them wait in both sides of the queue (up-or-down)
    let value before-me-y + (how-close-y * up-or-down)
    let max_value [ycor] of current-task + width-queuing-area
    let min_value [ycor] of current-task - width-queuing-area

    set destinationy max ( list min( list value max_value) min_value)]

  ;
  ifelse (abs(xcor - destinationx) > patchespertick or abs(ycor - destinationy) > patchespertick)[facexy destinationx destinationy check-for-obstacles][if start-tracking-time = 0 [set tracking-time-in-queue 1 set start-tracking-time 1]]
;;;;;;;;;;;;;

  ;;; THIS IS THE SAME LOGIC AS THE COMPETITIVE
  ; place self in a beneficial place where? (1 to either side, move 2 forward)   or similar to line competitively?
;  set how-close-x ([position myself serving-waiting-list] of current-task)
;  set destinationx (([xcor] of current-task) - (how-close-x + 4))                       ; xcor: they wait along the line where others wait in a place that is similar to their position in the list
;  set destinationy ([ycor] of current-task - startingpointx + how-close-y)                         ; ycor: their position on the vertical axis can vary in between + 4 or -4 from the position of the others
  ;set color brown ; for visual purposes
;  if (abs(xcor - destinationx) > patchespertick or abs(ycor - destinationy) > patchespertick)[facexy destinationx destinationy check-for-obstacles]

end


to update-competitiveness-length

  let how-long length [physical-waiting-list] of current-task

  if how-long >= 0 and how-long < 5 [set impact-on-me 0]
  if how-long >= 5 and how-long < acceptable-length [set impact-on-me how-long * impact-long-queues * 0.5 * 0.1 ]
  if how-long >= acceptable-length [set impact-on-me impact-long-queues]

  set tendency-after-queuing (natural-tendency + impact-on-me)
  ;set tendency-to-competitiveness min( list (tendency-to-competitiveness + impact-on-me) 100) ; update tendency and cap it
  if tendency-after-queuing > threshold-competitive [output-print who got-influenced]     ; if the value is now higher than the threshold, update both attitude and behaviour (got-influenced)


end

;;;;;;;;;;;;;; TRYING WITH SPATIAL CONSTRAINTS;;;;;;;;;;;;;;;;;;;;;;;,

to setup-obstacles

ask patches[
    set wall patches with
    [pxcor >= 3 and pxcor <= 5 and pycor  >=  8 and pycor <= 10 ]
  ]

  ask wall [
    set pcolor gray
    set walkable? "No"]

end

to check-for-obstacles
  let mydestiny patch destinationx destinationy
  ifelse [walkable?] of mydestiny = "No" [set color yellow set destinationx destinationx - (patchespertick + 0.5) set destinationy destinationy - (patchespertick + 0.5)]
  [if (abs(xcor - destinationx) > patchespertick or abs(ycor - destinationy) > patchespertick)[facexy destinationx destinationy forward patchespertick]]
end



to line-competitive-newversion

  ; if they are the number one in the serving queue, they go to the point where people are serviced (this is the same for all agents)
  if self = [item 0 serving-waiting-list] of current-task [

    set destinationx ([xcor] of current-task - startingpointx)
    set destinationy ([ycor] of current-task) - startingpointy

    ifelse (abs(xcor - destinationx) > patchespertick or abs(ycor - destinationy) > patchespertick)[facexy destinationx destinationy check-for-obstacles][if start-tracking-time = 0 [set tracking-time-in-queue 1 set start-tracking-time 1]]]

  ; if they are not the first ones in the serving queue, place them in a physical location that that mimics their number in serving queue
  if self != [item 0 serving-waiting-list] of current-task and first-jump = 0 [

     ; if their number in serving-waiting-list is between 1 and 5
    if number-in-serving-queue > frontal_position_min and number-in-serving-queue <= medium_position_min [
      set color cyan
      set first-destination one-of patches with [queuing-zone = "queuing_frontal"]
      set destinationx ([pxcor] of first-destination)
      set destinationy ([pycor] of first-destination)]
    ; if their number in serving-waiting-list is between 5 and 10
    if number-in-serving-queue > medium_position_min and number-in-serving-queue <= medium_position_max [
      set color red
      set first-destination one-of patches with [queuing-zone = "queuing_medium"]
      set destinationx ([pxcor] of first-destination)
      set destinationy ([pycor] of first-destination)]
    ; if their number in serving-waiting-list is between 10 and 20
    if number-in-serving-queue > medium_position_max[
      set color orange
      set first-destination one-of patches with [queuing-zone = "queuing_far"]
      set destinationx ([pxcor] of first-destination)
      set destinationy ([pycor] of first-destination)]



    set first-jump 1




    ;face current-task
    ;facexy destinationx destinationy
    ;fd (distance first-destination - (social-distancing / 1))
    ;while [any? other refugees with [current-task = [current-task] of self] in-radius (social-distancing / 1)][fd ( 0 - social-distancing)
    ;]
   ]

  if self != [item 0 serving-waiting-list] of current-task and first-jump = 1 [
    ifelse (abs(xcor - destinationx) > patchespertick or abs(ycor - destinationy) > patchespertick)[facexy destinationx destinationy check-for-obstacles][if start-tracking-time = 0 [set tracking-time-in-queue 1 set start-tracking-time 1]]]


    ;face current-task
    ;fd (distance current-task - (social-distancing / 1))
    ;while [any? other refugees with [current-task = [current-task] of self] in-radius (social-distancing / 1)][fd ( 0 - social-distancing)
    ;]
   ;]






    ;set how-close-x ([position myself serving-waiting-list] of current-task)            ; the position in which they manage to force themselves in the serving waiting list will dictate where they wait


    ;set destinationx ([xcor] of current-task - (how-close-x + startingpointx - 6) ) * 0.5                      ; xcor: they wait along the line where others wait in a place that is similar to their position in the list (- startingpointx to account for the place where the first member waits)
    ;set destinationy ([ycor] of current-task - startingpointy) + (how-close-y * up-or-down)    ]         ; ycor: their position on the vertical axis can vary in between + 4 or -4 from the position of the others

  ; constant queueing: if they are not where they should be yet, forward
 ; if (abs(xcor - destinationx) > patchespertick or abs(ycor - destinationy) > patchespertick)[facexy destinationx destinationy check-for-obstacles]



end



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ON-GOING WORK
; this function is called instead of the check-for-obstacles. so people have a destination and should walk towards it. however, they should guarantee they don't step on a patch with others
;; if this doesnt work, i can simply replace-all check-for-obstacles by "check-for-obstacles"
;to check-for-obstacles

;  ifelse not any? turtles-on patch-ahead 1 [facexy destinationx destinationy check-for-obstacles] [set color yellow rt 10 ]

;  ifelse not any? fooddistros-on patch-ahead 4
;      [if not any? other refugees-on patch-ahead 1 [facexy destinationx destinationy check-for-obstacles]]
;      [rt 1]
;  if any? fooddistros-on patch-ahead 10 [
;    rt 10
;    if any? fooddistros-on patch-ahead 10
;    [rt 10]
;    if any? fooddistros-on patch-ahead 10
;    [rt 10]]
;  if not any? fooddistros-on patch-ahead 10 [facexy destinationx destinationy check-for-obstacles]


;  ifelse any? turtles-on patch-ahead 2 [
;    set color yellow
;    rt 10
;    ifelse any? turtles-on patch-ahead 2 [
;      set color orange
;      rt 10
;      ifelse any? turtles-on patch-ahead 2 [
;        set color green
;        rt 10][facexy destinationx destinationy check-for-obstacles]] [facexy destinationx destinationy check-for-obstacles] ] [facexy destinationx destinationy check-for-obstacles]
;end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@#$#@#$#@
GRAPHICS-WINDOW
632
30
1450
449
-1
-1
10.0
1
10
1
1
1
0
1
1
1
-40
40
-20
20
0
0
1
ticks
30.0

BUTTON
112
84
175
117
NIL
setup
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
182
84
245
117
NIL
go
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
254
82
339
115
NIL
food-time
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

CHOOSER
17
178
155
223
social-distancing
social-distancing
0.5 1 1.5 2
2

SLIDER
166
177
347
210
percentage-competitive
percentage-competitive
0
100
20.0
1
1
NIL
HORIZONTAL

SLIDER
201
276
373
309
threshold-competitive
threshold-competitive
0
100
50.0
1
1
NIL
HORIZONTAL

SLIDER
201
310
373
343
radius-visibility
radius-visibility
0
10
4.0
1
1
NIL
HORIZONTAL

SLIDER
201
345
373
378
impact-seeing-cutting
impact-seeing-cutting
0
50
10.0
1
1
NIL
HORIZONTAL

TEXTBOX
205
240
355
268
Determining attitudes and influence of queue jumpers
11
0.0
1

PLOT
1513
23
1796
250
Number of People Changing Behaviour
Time (ticks)
new-competitive
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "plot count refugees with [attitude = \"new-competitive\"]"

TEXTBOX
20
242
170
284
Distance from queue to food distribution (placement of first in line)
11
0.0
1

SLIDER
17
291
189
324
startingpointx
startingpointx
0
6
4.0
0.2
1
NIL
HORIZONTAL

SLIDER
17
326
189
359
startingpointy
startingpointy
-3
4
2.0
0.2
1
NIL
HORIZONTAL

SLIDER
200
379
372
412
impact-long-queues
impact-long-queues
0
50
5.0
1
1
NIL
HORIZONTAL

SLIDER
199
414
371
447
acceptable-length
acceptable-length
0
30
15.0
1
1
NIL
HORIZONTAL

SWITCH
55
393
194
426
impact-length?
impact-length?
0
1
-1000

BUTTON
112
122
223
155
NIL
default-values
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
17
505
189
538
natural-distancing-x
natural-distancing-x
0
3
0.8
0.2
1
NIL
HORIZONTAL

SLIDER
16
539
188
572
natural-distancing-y
natural-distancing-y
0
3
0.8
0.2
1
NIL
HORIZONTAL

SLIDER
226
515
398
548
width-queuing-area
width-queuing-area
0
6
2.0
0.5
1
NIL
HORIZONTAL

SWITCH
54
446
195
479
with-obstacles?
with-obstacles?
1
1
-1000

MONITOR
347
119
404
164
NIL
day
17
1
11

MONITOR
409
120
466
165
NIL
hour
17
1
11

MONITOR
468
120
525
165
NIL
minute
17
1
11

CHOOSER
455
272
593
317
hours-open
hours-open
2 4 6 8
3

CHOOSER
451
453
589
498
distribution-pick-up
distribution-pick-up
"normal" "poisson"
1

PLOT
1512
255
1797
465
Time Spent Food vs TimeinQueue
NIL
NIL
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "plot timeSpentFood_average_output"
"pen-1" 1.0 0 -11033397 true "" "plot trackingTimeInQueue_average_output"

PLOT
1805
24
2055
246
Number of New competitive 
NIL
NIL
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "plot numberNewCompetitive_output"

PLOT
1805
256
2049
466
Number of new competitive joining
NIL
NIL
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "plot numberCompetitiveJoining_output"

PLOT
2059
25
2329
243
Size of the waiting lists
NIL
NIL
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"default" 1.0 0 -13791810 true "" "plot averageQueueSize_physical_output"
"pen-1" 1.0 0 -16050907 true "" "plot averageQueueSize_serving_output"

SLIDER
418
504
590
537
poisson-mean
poisson-mean
0.2
(hours-open * 0.5 ) + 1
3.0
0.2
1
NIL
HORIZONTAL

INPUTBOX
17
10
149
70
total-number-inhabitants
1200.0
1
0
Number

CHOOSER
152
24
300
69
policy-implemented
policy-implemented
"policy 0 (baseline)" "policy 1" "policy 2" "policy 3" "policy 4"
0

SWITCH
305
33
414
66
time-slot?
time-slot?
1
1
-1000

TEXTBOX
155
10
305
28
Representatitve-based policies
11
0.0
1

TEXTBOX
306
18
456
36
Time-slot-based policy
11
0.0
1

MONITOR
422
21
633
66
number of refugees attending distribution
num-refugees
17
1
11

@#$#@#$#@
## WHAT IS IT?

(a general understanding of what the model is trying to show or explain)

## HOW IT WORKS

(what rules the agents use to create the overall behavior of the model)

## HOW TO USE IT

(how to use the model, including a description of each of the items in the Interface tab)

## THINGS TO NOTICE

(suggested things for the user to notice while running the model)

## THINGS TO TRY

(suggested things for the user to try to do (move sliders, switches, etc.) with the model)

## EXTENDING THE MODEL

(suggested things to add or change in the Code tab to make the model more complicated, detailed, accurate, etc.)

## NETLOGO FEATURES

(interesting or unusual features of NetLogo that the model uses, particularly in the Code tab; or where workarounds were needed for missing features)

## RELATED MODELS

(models in the NetLogo Models Library and elsewhere which are of related interest)

## CREDITS AND REFERENCES

(a reference to the model's URL on the web if it has one, as well as any other necessary credits, citations, and links)
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

sheep
false
15
Circle -1 true true 203 65 88
Circle -1 true true 70 65 162
Circle -1 true true 150 105 120
Polygon -7500403 true false 218 120 240 165 255 165 278 120
Circle -7500403 true false 214 72 67
Rectangle -1 true true 164 223 179 298
Polygon -1 true true 45 285 30 285 30 240 15 195 45 210
Circle -1 true true 3 83 150
Rectangle -1 true true 65 221 80 296
Polygon -1 true true 195 285 210 285 210 240 240 210 195 210
Polygon -7500403 true false 276 85 285 105 302 99 294 83
Polygon -7500403 true false 219 85 210 105 193 99 201 83

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

wolf
false
0
Polygon -16777216 true false 253 133 245 131 245 133
Polygon -7500403 true true 2 194 13 197 30 191 38 193 38 205 20 226 20 257 27 265 38 266 40 260 31 253 31 230 60 206 68 198 75 209 66 228 65 243 82 261 84 268 100 267 103 261 77 239 79 231 100 207 98 196 119 201 143 202 160 195 166 210 172 213 173 238 167 251 160 248 154 265 169 264 178 247 186 240 198 260 200 271 217 271 219 262 207 258 195 230 192 198 210 184 227 164 242 144 259 145 284 151 277 141 293 140 299 134 297 127 273 119 270 105
Polygon -7500403 true true -1 195 14 180 36 166 40 153 53 140 82 131 134 133 159 126 188 115 227 108 236 102 238 98 268 86 269 92 281 87 269 103 269 113

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270
@#$#@#$#@
NetLogo 6.1.1
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
<experiments>
  <experiment name="no-competitive" repetitions="20" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <metric>ticks</metric>
    <metric>total_served</metric>
    <metric>timeInQueue_average_output</metric>
    <metric>timeInQueue_output_list</metric>
    <metric>timeInQueue_output</metric>
    <metric>timeInQueue_cooperative_output_list</metric>
    <metric>timeInQueue_cooperative_output</metric>
    <metric>timeInQueue_competitive_output_list</metric>
    <metric>timeInQueue_competitive_output</metric>
    <metric>timeInQueue_newcompetitive_output_list</metric>
    <metric>timeInQueue_newcompetitive</metric>
    <metric>numberNewCompetitive_output</metric>
    <metric>averageQueueSize_serving_output</metric>
    <metric>averageQueueSize_physical_output</metric>
    <metric>numberCompetitiveJoining_output</metric>
    <enumeratedValueSet variable="percentage-competitive">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="num-refugees">
      <value value="33"/>
      <value value="50"/>
      <value value="66"/>
      <value value="100"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="twenty-competitive" repetitions="20" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <metric>ticks</metric>
    <metric>total_served</metric>
    <metric>timeInQueue_average_output</metric>
    <metric>timeInQueue_output_list</metric>
    <metric>timeInQueue_output</metric>
    <metric>timeInQueue_cooperative_output_list</metric>
    <metric>timeInQueue_cooperative_output</metric>
    <metric>timeInQueue_competitive_output_list</metric>
    <metric>timeInQueue_competitive_output</metric>
    <metric>timeInQueue_newcompetitive_output_list</metric>
    <metric>timeInQueue_newcompetitive</metric>
    <metric>numberNewCompetitive_output</metric>
    <metric>averageQueueSize_serving_output</metric>
    <metric>averageQueueSize_physical_output</metric>
    <metric>numberCompetitiveJoining_output</metric>
    <enumeratedValueSet variable="percentage-competitive">
      <value value="20"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="num-refugees">
      <value value="33"/>
      <value value="50"/>
      <value value="66"/>
      <value value="100"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="fourty-competitive" repetitions="20" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <metric>ticks</metric>
    <metric>total_served</metric>
    <metric>timeInQueue_average_output</metric>
    <metric>timeInQueue_output_list</metric>
    <metric>timeInQueue_output</metric>
    <metric>timeInQueue_cooperative_output_list</metric>
    <metric>timeInQueue_cooperative_output</metric>
    <metric>timeInQueue_competitive_output_list</metric>
    <metric>timeInQueue_competitive_output</metric>
    <metric>timeInQueue_newcompetitive_output_list</metric>
    <metric>timeInQueue_newcompetitive</metric>
    <metric>numberNewCompetitive_output</metric>
    <metric>averageQueueSize_serving_output</metric>
    <metric>averageQueueSize_physical_output</metric>
    <metric>numberCompetitiveJoining_output</metric>
    <enumeratedValueSet variable="percentage-competitive">
      <value value="40"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="num-refugees">
      <value value="33"/>
      <value value="50"/>
      <value value="66"/>
      <value value="100"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="thirty-competitive" repetitions="20" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <metric>ticks</metric>
    <metric>total_served</metric>
    <metric>timeInQueue_average_output</metric>
    <metric>timeInQueue_output_list</metric>
    <metric>timeInQueue_output</metric>
    <metric>timeInQueue_cooperative_output_list</metric>
    <metric>timeInQueue_cooperative_output</metric>
    <metric>timeInQueue_competitive_output_list</metric>
    <metric>timeInQueue_competitive_output</metric>
    <metric>timeInQueue_newcompetitive_output_list</metric>
    <metric>timeInQueue_newcompetitive</metric>
    <metric>numberNewCompetitive_output</metric>
    <metric>averageQueueSize_serving_output</metric>
    <metric>averageQueueSize_physical_output</metric>
    <metric>numberCompetitiveJoining_output</metric>
    <enumeratedValueSet variable="percentage-competitive">
      <value value="30"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="num-refugees">
      <value value="33"/>
      <value value="50"/>
      <value value="66"/>
      <value value="100"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="no-competitive-fixedtime-1232021" repetitions="20" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <metric>ticks</metric>
    <metric>total_served</metric>
    <metric>timeSpentFood_average_output</metric>
    <metric>trackingTimeInQueue_average_output</metric>
    <metric>numberNewCompetitive_output</metric>
    <metric>averageQueueSize_serving_output</metric>
    <metric>averageQueueSize_physical_output</metric>
    <metric>numberCompetitiveJoining_output</metric>
    <enumeratedValueSet variable="percentage-competitive">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="num-refugees">
      <value value="33"/>
      <value value="50"/>
      <value value="66"/>
      <value value="100"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="twenty-competitive-fixedtime-1232021" repetitions="20" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <metric>ticks</metric>
    <metric>total_served</metric>
    <metric>timeSpentFood_average_output</metric>
    <metric>trackingTimeInQueue_average_output</metric>
    <metric>numberNewCompetitive_output</metric>
    <metric>averageQueueSize_serving_output</metric>
    <metric>averageQueueSize_physical_output</metric>
    <metric>numberCompetitiveJoining_output</metric>
    <enumeratedValueSet variable="percentage-competitive">
      <value value="20"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="num-refugees">
      <value value="33"/>
      <value value="50"/>
      <value value="66"/>
      <value value="100"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="ten-competitive-fixedtime-1232021" repetitions="20" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <metric>ticks</metric>
    <metric>total_served</metric>
    <metric>timeSpentFood_average_output</metric>
    <metric>trackingTimeInQueue_average_output</metric>
    <metric>numberNewCompetitive_output</metric>
    <metric>averageQueueSize_serving_output</metric>
    <metric>averageQueueSize_physical_output</metric>
    <metric>numberCompetitiveJoining_output</metric>
    <enumeratedValueSet variable="percentage-competitive">
      <value value="10"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="num-refugees">
      <value value="33"/>
      <value value="50"/>
      <value value="66"/>
      <value value="100"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="thirty-competitive-fixedtime-1232021" repetitions="20" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <metric>ticks</metric>
    <metric>total_served</metric>
    <metric>timeSpentFood_average_output</metric>
    <metric>trackingTimeInQueue_average_output</metric>
    <metric>numberNewCompetitive_output</metric>
    <metric>averageQueueSize_serving_output</metric>
    <metric>averageQueueSize_physical_output</metric>
    <metric>numberCompetitiveJoining_output</metric>
    <enumeratedValueSet variable="percentage-competitive">
      <value value="30"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="num-refugees">
      <value value="33"/>
      <value value="50"/>
      <value value="66"/>
      <value value="100"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="fourty-competitive-fixedtime-1232021" repetitions="20" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <metric>ticks</metric>
    <metric>total_served</metric>
    <metric>timeSpentFood_average_output</metric>
    <metric>trackingTimeInQueue_average_output</metric>
    <metric>numberNewCompetitive_output</metric>
    <metric>averageQueueSize_serving_output</metric>
    <metric>averageQueueSize_physical_output</metric>
    <metric>numberCompetitiveJoining_output</metric>
    <enumeratedValueSet variable="percentage-competitive">
      <value value="40"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="num-refugees">
      <value value="33"/>
      <value value="50"/>
      <value value="66"/>
      <value value="100"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="0.P0withS0S1S2S3S4" repetitions="10" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <metric>ticks</metric>
    <metric>total_served</metric>
    <metric>timeSpentFood_average_output</metric>
    <metric>trackingTimeInQueue_average_output</metric>
    <metric>numberNewCompetitive_output</metric>
    <metric>averageQueueSize_serving_output</metric>
    <metric>averageQueueSize_physical_output</metric>
    <metric>numberCompetitiveJoining_output</metric>
    <enumeratedValueSet variable="percentage-competitive">
      <value value="0"/>
      <value value="10"/>
      <value value="20"/>
      <value value="30"/>
      <value value="40"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="num-refugees">
      <value value="240"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="random-seed">
      <value value="40"/>
    </enumeratedValueSet>
  </experiment>
</experiments>
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
0
@#$#@#$#@
